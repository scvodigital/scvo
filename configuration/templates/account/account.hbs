<div class="container">
  <div class="columns">
    <div class="column col-9 col-xl-12">
      <h2>Details</h2>

      <form id="user-details-form" action="/update-account-details" method="POST" data-component="TasksTrigger" data-TasksTrigger='{
        change: { tasks: [ "validate-details-form" ] },
        keyup: { tasks: [ "validate-details-form" ] },
        load: { tasks: [ "validate-details-form" ] },
        submit: { tasks: [ "submit-and-spin" ]}
      }'>
        {{> account_details_form_fields admin=(compare @root.data.accountInfo.user_type 'Group Admin')}}

        {{!-- This will probably have a captcha in it, hence the separation, and weird submit format --}}
        <div class="columns h-padding">
          <div class="column col-3 hide-sm"></div>
          <div class="column col-2">
            <button id="submit" class="btn btn-primary b-margin-full">
              Save details
            </button>
          </div>
        </div>
      </form>

      <div class="divider v-margin-full"></div>

      <h2>Settings</h2>

      <div class="columns">
        <form class="column col-6 col-sm-12 form b-padding-full" id="change-password" data-component="TasksTrigger" data-TasksTrigger='{
    change: { tasks: [ "validate-password-form" ] },
    keyup: { tasks: [ "validate-password-form" ] },
    load: { tasks: [ "validate-password-form" ] }
  }'>
          {{#if (contains (map @root.data.auth.providerData (getProp "providerId")) "password") ~}}
            <h3>Change password</h3>
          {{else}}
            <h3>Set password</h3>
            <p>
              You are currently using a social media account to sign in. If you set a password you will also be able to sign in with your email address.
            </p>
          {{/if ~}}

          <div id="change-password-alert" class="alert hidden bg-error s-rounded x-padding v-margin">
            <span class="alert-message"></span>
          </div>

          <div class="form-group has-icon-left">
            <!-- <label class="form-label" for="change-password-password">New password</label> -->
            <input class="form-input" type="password" id="change-password-value" pattern=".{6,}" placeholder="New password" data-lpignore="true" autocomplete="nope"
              data-component="TasksTrigger" data-TasksTrigger="focus-next" required />
            <span class="form-icon far fa-key"></span>
          </div>
          <div class="form-group has-icon-left">
            <!-- <label class="form-label" for="change-password-confirm">New password (confirm)</label> -->
            <input class="form-input" type="password" id="change-password-confirm" pattern=".{6,}" placeholder="Confirm password" data-lpignore="true" autocomplete="nope"
              data-component="TasksTrigger" data-TasksTrigger="focus-next" required />
            <span class="form-icon far fa-key"></span>
          </div>

          <button type="button" class="btn btn-primary" data-component="TasksTrigger" data-TasksTrigger="show-confirm-modal"
            data-confirm-task="change-password" disabled data-confirm-verb="change your password" data-confirm-description="#change-password-description">
            {{!-- <span class="far fa-lock" aria-hidden="true"></span> --}}
            {{#if (contains (map @root.data.auth.providerData (getProp "providerId")) "password") ~}}
              Change password
            {{else}}
              Set password
            {{/if ~}}
          </button>
        </form>


      {{#unless @root.data.isAdmin ~}}
        <form class="column col-6 col-sm-12 b-padding-full form" id="change-email" data-component="TasksTrigger" data-TasksTrigger='{
    change: { tasks: [ "validate-email-form" ] },
    keyup: { tasks: [ "validate-email-form" ] },
    load: { tasks: [ "validate-email-form" ] }
  }'>
          <h3>Change email</h3>

          <div id="change-email-alert" class="alert hidden bg-error s-rounded x-padding v-margin">
            <span class="alert-message"></span>
          </div>

          <div class="form-group has-icon-left">
            <input class="form-input" type="email" id="change-email-value" placeholder="New email" data-lpignore="true" autocomplete="nope" data-component="TasksTrigger" data-TasksTrigger="focus-next" required />
            <span class="form-icon far fa-envelope"></span>
          </div>
          <div class="form-group has-icon-left">
            <input class="form-input" type="email" id="change-email-confirm" placeholder="Confirm email" data-lpignore="true" autocomplete="nope" data-component="TasksTrigger" data-TasksTrigger="focus-next" required />
            <span class="form-icon far fa-envelope"></span>
          </div>

          <button type="button" class="btn btn-primary" data-component="TasksTrigger" data-TasksTrigger="show-confirm-modal"
                  data-confirm-task="change-email"  disabled data-confirm-verb="change your email" data-confirm-description="#check-email-show-confirm">
            Change email
          </button>
        </form>
      {{/unless ~}}
      </div>

      <div class="columns">
        {{#unless @root.data.isAdmin ~}}
        <div class="column col-6 col-sm-12 form b-padding-full" id="link-unlink">
          {{#ifAny (contains (map @root.data.auth.providerData (getProp "providerId")) "google.com") (contains (map @root.data.auth.providerData (getProp "providerId")) "twitter.com") (contains (map @root.data.auth.providerData (getProp "providerId")) "facebook.com") ~}}
          <h3>Linked accounts</h3>

          <div id="unlink-provider-alert" class="alert hidden bg-error s-rounded x-padding v-margin">
            <span class="alert-message"></span>
          </div>

          {{#if (contains (map @root.data.auth.providerData (getProp "providerId")) "google.com") ~}}
            <button class="chip bg-primary bg-google b-margin" type="button" data-component="TasksTrigger" data-TasksTrigger="show-confirm-modal" data-provider-id="google.com"
              data-confirm-task="unlink-provider" data-confirm-verb="unlink from Google" data-confirm-description="#unlink-provider-description" data-confirm-data='{ "providerId": "google.com" }'>
              <span class="fab fa-fw fa-google"></span>
              Unlink from Google
            </button>
          {{/if ~}}

          {{#if (contains (map @root.data.auth.providerData (getProp "providerId")) "twitter.com") ~}}
            <button class="chip bg-primary bg-twitter b-margin" type="button" data-component="TasksTrigger" data-TasksTrigger="show-confirm-modal" data-provider-id="twitter.com"
              data-confirm-task="unlink-provider" data-confirm-verb="unlink from Twitter" data-confirm-description="#unlink-provider-description" data-confirm-data='{ "providerId": "twitter.com" }'>
              <span class="fab fa-fw fa-twitter"></span>
              Unlink from Twitter
            </button>
          {{/if ~}}

          {{#if (contains (map @root.data.auth.providerData (getProp "providerId")) "facebook.com") ~}}
            <button class="chip bg-primary bg-facebook b-margin" type="button" data-component="TasksTrigger" data-TasksTrigger="show-confirm-modal" data-provider-id="facebook.com"
              data-confirm-task="unlink-provider" data-confirm-verb="unlink from Facebook" data-confirm-description="#unlink-provider-description" data-confirm-data='{ "providerId": "facebook.com" }'>
              <span class="fab fa-fw fa-facebook"></span>
              Unlink from Facebook
            </button>
          {{/if ~}}
          {{/ifAny ~}}

          {{#unless (ifAll (contains (map @root.data.auth.providerData (getProp "providerId")) "google.com") (contains (map @root.data.auth.providerData (getProp "providerId")) "twitter.com") (contains (map @root.data.auth.providerData (getProp "providerId")) "facebook.com")) ~}}
          <h3>Available providers</h3>

          <div id="link-provider-alert" class="alert hidden bg-error s-rounded x-padding v-margin">
            <span class="alert-message"></span>
          </div>

          {{#unless (contains (map @root.data.auth.providerData (getProp "providerId")) "google.com") ~}}
            <button class="chip bg-primary bg-google b-margin" type="button" data-component="TasksTrigger" data-TasksTrigger="show-confirm-modal" data-provider-id="google.com"
              data-confirm-task="link-provider" data-confirm-verb="link to Google" data-confirm-description="#link-provider-description" data-confirm-data='{ "providerId": "google.com" }'>
              <span class="fab fa-fw fa-google"></span>
              Link to Google
            </button>
          {{/unless ~}}

          {{#unless (contains (map @root.data.auth.providerData (getProp "providerId")) "twitter.com") ~}}
            <button class="chip bg-primary bg-twitter b-margin" type="button" data-component="TasksTrigger" data-TasksTrigger="show-confirm-modal" data-provider-id="twitter.com"
              data-confirm-task="link-provider" data-confirm-verb="link to Twitter" data-confirm-description="#link-provider-description" data-confirm-data='{ "providerId": "twitter.com" }'>
              <span class="fab fa-fw fa-twitter"></span>
              Link to Twitter
            </button>
          {{/unless ~}}

          {{#unless (contains (map @root.data.auth.providerData (getProp "providerId")) "facebook.com") ~}}
            <button class="chip bg-primary bg-facebook b-margin" type="button" data-component="TasksTrigger" data-TasksTrigger="show-confirm-modal" data-provider-id="facebook.com"
              data-confirm-task="link-provider" data-confirm-verb="link to Facebook" data-confirm-description="#link-provider-description" data-confirm-data='{ "providerId": "facebook.com" }'>
              <span class="fab fa-fw fa-facebook"></span>
              Link to Facebook
            </button>
          {{/unless ~}}
          {{/unless ~}}
        </div>
        {{/unless ~}}

        {{#unless @root.data.isAdmin ~}}
        <div class="column col-6 col-sm-12 form b-padding-full">
          <h3>Account data</h3>

          <div id="delete-account-alert" class="alert hidden bg-error s-rounded x-padding v-margin">
            <span class="alert-message"></span>
          </div>

          <!-- <button type="button" class="btn v-margin" onclick="exportUserData();">
            Export account settings
          </button>
          <button class="btn v-margin" data-dialog-target="#import-user-dialog">
            <span class="far fa-download" aria-hidden="true"></span>
            Import account settings
          </button> -->
          <button class="btn btn-error" id="delete-account-button" data-component="TasksTrigger"
            data-TasksTrigger="show-confirm-modal" data-confirm-task="delete-account" data-confirm-verb="delete your account"
            data-confirm-description="#delete-account-description">
            <!-- <span class="far fa-trash" aria-hidden="true"></span> -->
            Delete account
          </button>
        </div>
        {{/unless ~}}
      </div>
    </div>
  </div>
</div>

<div class="modal" id="confirm-modal">
  <a href="#" class="modal-overlay" aria-label="Close"></a>
  <div class="modal-container">
    <div class="modal-header">
      <a href="#close" class="btn btn-clear float-right" aria-label="Close" data-component="TasksTrigger" data-TasksTrigger="hide-modal"></a>
      <div class="modal-title h5">
        Please sign in again to <span id="action-verb"></span>
      </div>
    </div>
    <div class="modal-body">
      <div class="content">
        <div id="action-description"></div>

        <div id="re-authentication-form">
          <div id="re-authenticate-alert" class="alert hidden bg-error s-rounded x-padding v-margin">
            <span class="alert-message"></span>
          </div>

          <div class="social">
            {{#if (contains (map @root.data.auth.providerData (getProp "providerId")) "google.com")}}
              <button class="btn re-authentication-button" id="continue-with-google" type="button" data-component="TasksTrigger" data-TasksTrigger="re-authenticate" data-provider-id="google.com">
                <span class="fab fa-2x google-logo"><img src="https://storage.googleapis.com/scvo-assets/test/volunteerscotland-search/images/logos/g-logo.png" /></span>
                Sign in with Google
              </button>
            {{/if}}

            {{#if (contains (map @root.data.auth.providerData (getProp "providerId")) "twitter.com")}}
              <button class="btn re-authentication-button" id="continue-with-twitter" type="button" data-component="TasksTrigger" data-TasksTrigger="re-authenticate" data-provider-id="twitter.com">
                <span class="fab fa-twitter-square fa-2x"></span>
                Sign in with Twitter
              </button>
            {{/if}}

            {{#if (contains (map @root.data.auth.providerData (getProp "providerId")) "facebook.com")}}
              <button class="btn re-authentication-button" id="continue-with-facebook" type="button" data-component="TasksTrigger" data-TasksTrigger="re-authenticate" data-provider-id="facebook.com">
                <span class="fab fa-facebook-square fa-2x"></span>
                Sign in with Facebook
              </button>
            {{/if}}

            {{#if (contains (map @root.data.auth.providerData (getProp "providerId")) "password")}}
              {{#compare (length @root.data.auth.providerData) ">" 1}}
                <div class="divider text-center v-margin-full" data-content="or"></div>
              {{/compare}}

              <div class="form-group has-icon-left">
                <input class="form-input" type="password" id="re-authenticate-password" placeholder="Password" />
                <span class="form-icon far fa-key" id="re-authenticate-password-icon"></span>
              </div>

              <div id="form-section-sign-in-buttons" class="t-margin">
                <button class="btn btn-primary re-authentication-button" type="button" id="re-authenticate-submit" data-component="TasksTrigger" data-TasksTrigger="re-authenticate" data-provider-id="password">
                  Sign in with password
                </button>
              </div>
            {{/if}}
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<div id="delete-account-description" class="hidden">
  {{!-- <p>
    To delete your account you must sign in again.
  </p> --}}
  <p>
    Deleting your account will:
  </p>
  <ul>
    <li>Delete your entire history of volunteering including any hours that have been verified</li>
    <li>Delete any hours you have claimed from a group volunteering certificate (any claim codes used will no longer be valid)</li>
    <li>Unlink any social accounts you may have used to sign in</li>
    <li>Fully remove your account details from the Saltire Awards system</li>
  </ul>
  <p>
    You will no longer be able to access any certificates you have been awarded.
  </p>
</div>

<div id="change-email-description" class="hidden">
  <p>
    To change your email you must sign in again.
  </p>
</div>

<div id="change-password-description" class="hidden">
  <p>
    To confirm your password change you must sign in again.
  </p>
  <p>
    If you have not previously signed in with a password you will now be able to
    using the email '{{@root.data.auth.email}}'
  </p>
</div>

<div id="unlink-provider-description" class="hidden">
  <p>
    To unlink from this account you must sign in again.
  </p>
</div>

<div id="link-provider-description" class="hidden">
  <p>
    To link with this account you must sign in again.
  </p>
</div>

<script data-component-config="re-authenticate" type="javascript/blocked">
  {
    click: {
      tasks: [
        {
          type: "elementManipulator",
          config: { "#re-authentication-form": { addClass: "disabled" } }
        },
        {
          name: "reAuthenticate",
          type: "firebaseReAuthenticate",
          config: {
            password: { __template: '\{{jquery "#re-authenticate-password" "val"}}' },
            providerId: { __template: '\{{jquery rootElement "data" (split "provider-id")}}' }
          }
        },
        {
          type: "switch",
          config: {
            which: { __template: "\{{#if errors.reAuthenticate}}error\{{/if}}" },
            branches: {
              default: {
                tasks: [
                  {
                    type: "elementManipulator",
                    config: { "#confirm-modal": { removeClass: "active" } }
                  },
                  { __template: '\{{jquery rootElement "data" (split "post-auth-task")}}' }
                ]
              },
              error: {
                tasks: [
                  {
                    type: "elementManipulator",
                    config: {
                      "#re-authenticate-alert": { removeClass: "hidden" },
                      "#re-authenticate-alert .alert-message": { contents: { __template: "\{{errors.reAuthenticate.message}}" } }
                    }
                  }
                ]
              }
            }
          }
        },
        {
          type: "elementManipulator",
          config: { "#re-authentication-form": { removeClass: "disabled" } }
        }
      ]
    }
  }
</script>





<script data-component-config="show-confirm-modal" type="javascript/blocked">
  {
    click: {
      tasks: [
        {
          type: "elementManipulator",
          config: {
            "#action-verb": { contents: { __template: "\{{jquery rootElement 'data' (split 'confirm-verb')}}" } },
            "#action-description": { contents: { __template: "\{{{jquery (jquery rootElement 'data' (split 'confirm-description')) 'html'}}}" } },
            ".re-authentication-button": {
              attributes: {
                "data-post-auth-task": { __template: "\{{jquery rootElement 'data' (split 'confirm-task')}}" },
                "data-post-auth-task-data": { __template: "\{{{json value=(jquery rootElement 'data' (split 'confirm-data'))}}}" }
              }
            },
            "#confirm-modal": { addClass: "active" }
          }
        }
      ]
    }
  }
</script>


<script data-task="change-password" type="javascript/blocked">
  {
    type: "multiTask",
    config: {
      tasks: [
        {
          type: "run",
          config: { code: "window.formHasChanged = false" }
        },
        {
          type: "elementManipulator",
          config: { "#change-password": { addClass: "disabled" } }
        },
        {
          name: "changePassword",
          type: "firebaseChangePassword",
          config: {
            password: { __template: "\{{jquery '#change-password-value' 'val'}}" },
            passwordConfirm: { __template: "\{{jquery '#change-password-confirm' 'val'}}" }
          }
        },
        {
          __doNotCompile: true,
          type: "switch",
          config: {
            which: { __template: "\{{#if errors.changePassword}}error\{{/if}}" },
            branches: {
              default: {
                tasks: [
                  {
                    type: "run",
                    config: { code: "window.location.href = '/account'" }
                  }
                ]
              },
              error: {
                tasks: [
                  {
                    type: "elementManipulator",
                    config: {
                      "#change-password-alert": { removeClass: "hidden" },
                      "#change-password-alert .alert-message": { contents: { __template: "\{{errors.changePassword.message}}" } }
                    }
                  }
                ]
              }
            }
          }
        },
        {
          type: "elementManipulator",
          config: { "#change-password": { removeClass: "disabled" } }
        }
      ]
    }
  }
</script>

<script data-task="change-email" type="javascript/blocked">
  {
    type: "multiTask",
    config: {
      tasks: [
        {
          type: "run",
          config: { code: "window.formHasChanged = false" }
        },
        {
          type: "elementManipulator",
          config: { "#change-email": { addClass: "disabled" } }
        },
        {
          name: "changeEmail",
          type: "firebaseChangeEmail",
          config: {
            email: { __template: "\{{jquery '#change-email-value' 'val'}}" },
            emailConfirm: { __template: "\{{jquery '#change-email-confirm' 'val'}}" }
          }
        },
        {
          __doNotCompile: true,
          name: "checkChangelWorked",
          type: "switch",
          config: {
            which: { __template: "\{{#if errors.changeEmail}}error\{{/if}}" },
            branches: {
              default: {
                tasks: [
                  {
                    name: "changeSalesforceEmail",
                    type: "request",
                    config: {
                      url: "/change-email",
                      method: "POST",
                      dataType: "json",
                      data: {
                        __template: `{ "email" : "\{{jquery '#change-email-value' 'val'}}" }`,
                        __parser: "json"
                      }
                    }
                  },
                  {
                    type: "switch",
                    config: {
                      which: { __template: "\{{#if errors.changeSalesforceEmail}}error\{{/if}}" },
                      branches: {
                        default: {
                          tasks: [
                            {
                              type: "elementManipulator",
                              config: {
                                "#change-email-alert": { removeClass: "hidden" },
                                "#change-email-alert .alert-message": { contents: "Email updated" },
                                "#change-email-value": { value: "" },
                                "#change-email-confirm": { value: "" }
                              }
                            }
                          ]
                        },
                        error: {
                          tasks: [
                            {
                              type: "elementManipulator",
                              config: {
                                "#change-email-alert": { removeClass: "hidden" },
                                "#change-email-alert .alert-message": { contents: { __template: "\{{errors.changeEmail.message}}" } }
                              }
                            }
                          ]
                        }
                      }
                    }
                  }
                ]
              },
              error: {
                tasks: [
                  {
                    type: "elementManipulator",
                    config: {
                      "#change-email-alert": { removeClass: "hidden" },
                      "#change-email-alert .alert-message": { contents: { __template: "\{{errors.changeEmail.message}}" } }
                    }
                  }
                ]
              }
            }
          }
        },
        {
          type: "elementManipulator",
          config: { "#change-email": { removeClass: "disabled" } }
        }
      ]
    }
  }
</script>

<script data-task="link-provider" type="javascript/blocked">
  {
    type: "multiTask",
    config: {
      tasks: [
        {
          type: "run",
          config: { code: "window.formHasChanged = false" }
        },
        {
          type: "elementManipulator",
          config: { "#link-unlink": { addClass: "disabled" } }
        },
        {
          __doNotCompile: true,
          name: "linkProvider",
          type: "firebaseLinkProvider",
          config: {
            providerId: { __template: "\{{get (jquery rootElement 'data' (split 'post-auth-task-data')) 'providerId'}}" }
          }
        },
        {
          __doNotCompile: true,
          type: "switch",
          config: {
            which: { __template: "\{{#if errors.linkProvider}}error\{{/if}}" },
            branches: {
              default: {
                tasks: [
                  {
                    type: "run",
                    config: { code: "window.location.href = '/account'" }
                  }
                ]
              },
              error: {
                tasks: [
                  {
                    type: "elementManipulator",
                    config: {
                      "#link-provider-alert": { removeClass: "hidden" },
                      "#link-provider-alert .alert-message": { contents: { __template: "\{{errors.linkProvider.message}}" } }
                    }
                  }
                ]
              }
            }
          }
        },
        {
          type: "elementManipulator",
          config: { "#link-unlink": { removeClass: "disabled" } }
        }
      ]
    }
  }
</script>

<script data-task="unlink-provider" type="javascript/blocked">
  {
    type: "multiTask",
    config: {
      tasks: [
        {
          type: "run",
          config: { code: "window.formHasChanged = false" }
        },
        {
          type: "elementManipulator",
          config: { "#link-unlink": { addClass: "disabled" } }
        },
        {
          __doNotCompile: true,
          name: "unlinkProvider",
          type: "firebaseUnlinkProvider",
          config: {
            providerId: { __template: "\{{get (jquery rootElement 'data' (split 'post-auth-task-data')) 'providerId'}}" }
          }
        },
        {
          __doNotCompile: true,
          type: "switch",
          config: {
            which: { __template: "\{{#if errors.unlinkProvider}}error\{{/if}}" },
            branches: {
              default: {
                tasks: [
                  {
                    type: "run",
                    config: { code: "window.location.href = '/account'" }
                  }
                ]
              },
              error: {
                tasks: [
                  {
                    type: "elementManipulator",
                    config: {
                      "#unlink-provider-alert": { removeClass: "hidden" },
                      "#unlink-provider-alert .alert-message": { contents: { __template: "\{{errors.unlinkProvider.message}}" } }
                    }
                  }
                ]
              }
            }
          }
        },
        {
          type: "elementManipulator",
          config: { "#link-unlink": { removeClass: "disabled" } }
        }
      ]
    }
  }
</script>

<script data-task="delete-account" type="javascript/blocked">
  {
    type: "multiTask",
    config: {
      tasks: [
        {
          type: "run",
          config: { code: "window.formHasChanged = false" }
        },
        {
          name: "deleteRequest",
          type: "request",
          config: { url: "/delete-user" }
        },
        {
        type: "run",
        config: { code: "window.formHasChanged = false" }
        },
        {
          __doNotCompile: true,
          type: "switch",
          config: {
            which: { __template: "\{{#if errors.deleteRequest}}error\{{/if}}" },
            branches: {
              default: {
                tasks: [
                  {
                    name: "firebaseDelete",
                    type: "firebaseDeleteUser",
                    config: {}
                  },
                  {
                    __doNotCompile: true,
                    type: "switch",
                    config: {
                      which: { __template: "\{{#if errors.firebaseDelete}}error\{{/if}}" },
                      branches: {
                        default: {
                          tasks: [
                            {
                              type: "run",
                              config: { code: "window.location.href = '/'" }
                            }
                          ]
                        },
                        error: {
                          halt: true,
                          tasks: [
                            {
                              type: "elementManipulator",
                              config: {
                                "#delete-account-alert": { removeClass: "hidden" },
                                "#delete-account-alert .alert-message": { contents: { __template: "\{{errors.firebaseDelete.message}}" } }
                              }
                            }
                          ]
                        }
                      }
                    }
                  }
                ]
              },
              error: {
                tasks: [
                  {
                    type: "elementManipulator",
                    config: {
                      "#delete-user-alert": { removeClass: "hidden" },
                      "#delete-user-alert .alert-message": { contents: { __template: "\{{errors.deleteRequest.message}}" } }
                    }
                  }
                ]
              }
            }
          }
        }
      ]
    }
  }
</script>

<script data-component-config="hide-modal" type="javascript/blocked">
  {
    click: {
      tasks: [
        {
          type: "elementManipulator",
          config: {
            "<.modal": { removeClass: "active" },
            "<.modal | >.alert": { addClass: "hidden" }
          }
        }
      ]
    }
  }
</script>

<script>
  document.addEventListener("DOMContentLoaded", function(event) {



    $(window).on('beforeunload', function(){
      if (window.formHasChanged) return "Changes that you made to account info may not be saved.";
    });

  })
</script>

{{!-- <script src="https://www.google.com/recaptcha/api.js" async defer></script> --}}
<script src="{{~>asset_url url='downloader.js'~}}"></script>
<script>


  {{#if @root.data.export_user_data ~}}
  function exportUserData() {
    var dataUrl = 'data:application/json;base64,{{{btoa @root.data.export_user_data}}}';
    download(dataUrl, 'user-export.json', 'application/json');
  };
  {{/if ~}}
</script>